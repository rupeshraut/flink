# Flink Advanced Demo Configuration

# Kafka Configuration
kafka:
  bootstrap-servers: "localhost:9092"
  topics:
    events: "events"
    results: "results"
    alerts: "alerts"
  consumer:
    group-id: "flink-demo-consumer"
    auto-offset-reset: "latest"
    enable-auto-commit: false
  producer:
    acks: "all"
    retries: 3
    compression-type: "snappy"

# Flink Configuration
flink:
  parallelism: 4
  checkpointing:
    enabled: true
    interval: 60000  # 1 minute
    timeout: 300000  # 5 minutes
    min-pause-between: 5000
    max-concurrent: 1
    externalized-cleanup: "retain"
  restart-strategy:
    type: "fixed-delay"
    attempts: 3
    delay: 10000  # 10 seconds
  state-backend:
    type: "hashmap"  # or "rocksdb"
    checkpoint-dir: "file:///tmp/flink-checkpoints"
  
# Application Configuration
app:
  # Event generation
  event-generator:
    num-users: 1000
    events-per-second: 100
    session-timeout: 900000  # 15 minutes
  
  # Analytics Configuration
  analytics:
    window-sizes:
      - "1 minute"
      - "5 minutes"
      - "1 hour"
    watermark-delay: 5000  # 5 seconds
    allowed-lateness: 60000  # 1 minute
  
  # Pattern Detection
  patterns:
    fraud-detection:
      enabled: true
      min-amount: 1000.0
      max-velocity: 5
      time-window: 600000  # 10 minutes
    abandoned-cart:
      enabled: true
      timeout: 1800000  # 30 minutes
    user-journey:
      enabled: true
      max-events: 20
      session-gap: 900000  # 15 minutes

# Monitoring and Metrics
monitoring:
  metrics:
    enabled: true
    reporters:
      - "jmx"
      - "slf4j"
    interval: 10000  # 10 seconds
  
  # Health checks
  health:
    kafka-timeout: 5000
    checkpoint-lag-threshold: 300000  # 5 minutes

# Development Settings
development:
  synthetic-data:
    enabled: true
    auto-create-topics: true
  logging:
    level: "INFO"
    pattern: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# Production Settings (override for production)
production:
  flink:
    parallelism: -1  # Use cluster default
    checkpointing:
      interval: 30000  # 30 seconds
    state-backend:
      type: "rocksdb"
      checkpoint-dir: "hdfs://namenode:port/flink-checkpoints"
  kafka:
    bootstrap-servers: "kafka-cluster:9092"
  monitoring:
    metrics:
      reporters:
        - "prometheus"
        - "influx"
