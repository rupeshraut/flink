/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.5/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'java'
    id 'idea'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    
    // Apache repository for Flink snapshots
    maven {
        url "https://repository.apache.org/content/repositories/snapshots"
    }
}

ext {
    flinkVersion = '1.18.0'
    kafkaVersion = '3.6.1'
    jacksonVersion = '2.16.1'
    slf4jVersion = '2.0.9'
    logbackVersion = '1.4.14'
    junitVersion = '5.10.1'
}

dependencies {
    // Apache Flink Core
    implementation "org.apache.flink:flink-streaming-java:${flinkVersion}"
    implementation "org.apache.flink:flink-clients:${flinkVersion}"
    implementation "org.apache.flink:flink-runtime-web:${flinkVersion}"
    
    // Flink Connectors
    implementation "org.apache.flink:flink-connector-kafka:3.0.2-1.18"
    implementation "org.apache.flink:flink-connector-files:${flinkVersion}"
    implementation "org.apache.flink:flink-connector-datagen:${flinkVersion}"
    
    // Flink Table API & SQL
    implementation "org.apache.flink:flink-table-api-java-bridge:${flinkVersion}"
    implementation "org.apache.flink:flink-table-runtime:${flinkVersion}"
    implementation "org.apache.flink:flink-table-planner-loader:${flinkVersion}"
    
    // Flink CEP (Complex Event Processing)
    implementation "org.apache.flink:flink-cep:${flinkVersion}"
    
    // Flink State Backends
    implementation "org.apache.flink:flink-statebackend-rocksdb:${flinkVersion}"
    
    // Apache Kafka
    implementation "org.apache.kafka:kafka-clients:${kafkaVersion}"
    implementation "org.apache.kafka:kafka-streams:${kafkaVersion}"
    
    // JSON Processing
    implementation "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"
    
    // Logging
    implementation "org.slf4j:slf4j-api:${slf4jVersion}"
    implementation "ch.qos.logback:logback-classic:${logbackVersion}"
    
    // Metrics
    implementation "org.apache.flink:flink-metrics-dropwizard:${flinkVersion}"
    implementation "io.dropwizard.metrics:metrics-core:4.2.23"
    
    // Configuration
    implementation "com.typesafe:config:1.4.3"
    
    // Machine Learning and AI
    implementation "org.apache.flink:flink-ml-core:2.3.0"
    implementation "org.apache.flink:flink-ml-iteration:2.3.0"
    implementation "org.apache.flink:flink-ml-lib:2.3.0"
    implementation "org.deeplearning4j:deeplearning4j-core:1.0.0-M2.1"
    implementation "org.nd4j:nd4j-native-platform:1.0.0-M2.1"
    implementation "org.tensorflow:tensorflow-core-platform:0.5.0"
    
    // Graph Processing
    implementation "org.apache.flink:flink-gelly:${flinkVersion}"
    implementation "org.jgrapht:jgrapht-core:1.5.2"
    implementation "org.apache.spark:spark-graphx_2.12:3.5.0"
    
    // Time Series Analysis
    implementation "com.github.signaflo:timeseries:0.4.2"
    implementation "org.apache.commons:commons-math3:3.6.1"
    implementation "tech.tablesaw:tablesaw-core:0.43.1"
    
    // Vector Databases and Embeddings
    implementation "dev.langchain4j:langchain4j:0.25.0"
    implementation "dev.langchain4j:langchain4j-embeddings:0.25.0"
    implementation "io.pinecone:pinecone-client:0.7.0"
    implementation "co.elastic:elasticsearch-java:8.11.0"
    
    // Quantum Computing Simulation
    implementation "org.apache.commons:commons-complex:1.0"
    implementation "org.ejml:ejml-all:0.43.1"
    
    // Computer Vision and NLP
    implementation "org.apache.opennlp:opennlp-tools:2.3.1"
    implementation "org.bytedeco:javacv:1.5.9"
    implementation "org.bytedeco:opencv:4.7.0-1.5.9"
    
    // Advanced Data Structures
    implementation "it.unimi.dsi:fastutil:8.5.12"
    implementation "org.roaringbitmap:RoaringBitmap:0.9.47"
    implementation "com.clearspring.analytics:stream:2.9.8"
    
    // Distributed Computing
    implementation "org.apache.ignite:ignite-core:2.16.0"
    implementation "org.apache.ignite:ignite-flink:1.0.0"
    
    // Neuromorphic Computing & Spiking Neural Networks
    implementation 'org.neuroph:neuroph:2.98'
    implementation 'org.encog:encog-core:3.4'
    implementation 'com.github.haifengl:smile-core:3.0.2'
    implementation 'com.github.haifengl:smile-math:3.0.2'
    
    // Digital Twin & IoT Simulation
    implementation 'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.2.5'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.16.1'
    implementation 'org.eclipse.paho:org.eclipse.paho.mqttv5.client:1.2.5'
    
    // Edge Computing & Distributed Intelligence
    implementation 'io.micrometer:micrometer-core:1.12.2'
    implementation 'io.github.resilience4j:resilience4j-all:2.2.0'
    implementation 'org.apache.commons:commons-collections4:4.4'
    
    // Advanced Physics Simulation
    implementation 'org.apache.commons:commons-statistics-distribution:1.0'
    implementation 'cern:colt:1.2.0'
    implementation 'org.apache.commons:commons-geometry-core:1.0'
    
    // Hybrid AI & Symbolic Reasoning
    implementation 'org.apache.jena:apache-jena-libs:4.10.0'
    implementation 'org.semanticweb.elk:elk-owlapi:0.4.3'
    
    // Testing
    testImplementation "org.apache.flink:flink-test-utils:${flinkVersion}"
    testImplementation "org.apache.flink:flink-runtime:${flinkVersion}:tests"
    testImplementation "org.apache.flink:flink-streaming-java:${flinkVersion}:tests"
    testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
    testImplementation "org.mockito:mockito-core:5.8.0"
    testImplementation "org.testcontainers:junit-jupiter:1.19.3"
    testImplementation "org.testcontainers:kafka:1.19.3"
    testRuntimeOnly "org.junit.platform:junit-platform-launcher"
}

// Define the main class for the application.
application {
    mainClass = 'com.example.flink.FlinkAdvancedDemo'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    
    // Test configuration
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
    
    // Increase test heap size
    maxHeapSize = "2g"
    
    // JVM arguments for tests
    jvmArgs = [
        '-XX:+UseG1GC',
        '-XX:MaxMetaspaceSize=512m'
    ]
}

tasks.named('run') {
    // Increase heap size for running Flink applications
    maxHeapSize = "4g"
    
    // JVM arguments for better Flink performance
    jvmArgs = [
        '-XX:+UseG1GC',
        '-XX:MaxMetaspaceSize=512m',
        '-Dlog4j.configurationFile=src/main/resources/log4j2.properties'
    ]
}

// Fat JAR for Flink cluster deployment
task fatJar(type: Jar) {
    archiveClassifier = 'all'
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
    
    // Exclude Flink dependencies that are provided by the cluster
    exclude 'META-INF/services/org.apache.flink.**'
    exclude 'org/apache/flink/**'
    exclude 'org/slf4j/**'
    exclude 'ch/qos/logback/**'
    
    manifest {
        attributes 'Main-Class': application.mainClass
    }
}

// Task to run specific Flink jobs
task runStreamProcessing(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.example.flink.streaming.RealTimeAnalyticsJob'
    maxHeapSize = "2g"
}

task runComplexEventProcessing(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.example.flink.cep.ComplexEventPatternJob'
    maxHeapSize = "2g"
}

task runKafkaStreamProcessing(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.example.flink.kafka.KafkaStreamProcessingJob'
    maxHeapSize = "2g"
}
